{"version":3,"file":"userfront-core.module.js","sources":["../src/store.js","../src/utils.js","../src/user.js","../src/api.js","../src/cookies.js","../src/tokens.js","../src/mfa.js","../src/session.js","../src/pkce.js","../src/url.js","../src/authentication.js","../src/refresh.js","../src/password.js","../src/sso.js","../src/link.js","../src/verificationCode.js","../src/totp.js","../src/logout.js","../src/constants.js","../src/mode.js","../src/user.methods.js","../src/index.js","../src/login.js","../src/password.migrate.js","../src/saml.js","../src/signup.js"],"sourcesContent":["export const store = {\n  user: {},\n  tokens: {},\n  mode: \"live\",\n};\n","/**\n * This file is for zero-dependency utilities that can\n * be imported by any other file. Don't add any imports\n * to this file other than constants\n */\n\n/**\n * Get the unverified base64 decoded payload of a JWT\n *\n * @param {String} token - JSON Web Token\n * @returns {Object}\n */\nexport function getJwtPayload(token) {\n  try {\n    // Split token into constituent parts\n    const base64Url = token.split('.')[1];\n    // Convert from base64url to base64 encoding\n    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n    \n    // To correctly decode a UTF-8 string without misinterpreting non-ASCII characters:\n    // 1. Decode the base64 to a UTF-16 string that may contain misinterpreted chars (window.atob)\n    //    -> DOMStrings are natively UTF-16LE, while JWTs are UTF-8\n    // 2. Convert the string to percent encoding (map each char to %HH where HH = hex value of byte)\n    //    (the '00' + ... + .slice(-2) bit ensures a single char is encoded correctly,\n    //     not strictly necessary here but included for correctness)\n    // 3. Interpret the percent-encoded string as a URI component, which is UTF-8 by definition (decodeURIComponent)\n    //    -> now non-ASCII characters \n    //  \n    const jsonPayload = decodeURIComponent(window.atob(base64).split('').map(c => \n      '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2)\n    ).join(''));\n\n    return JSON.parse(jsonPayload);\n  } catch (error) {\n    console.error(\"Problem decoding JWT payload\", error);\n  }\n}\n\n/*\n  Worked example of decoding above:\n  A JWT payload {\"foo\":\"bår\"} is base64url encoded as eyJmb28iOiJiw6VyIn0\n  1. base64url to base64: eyJmb28iOiJiw6VyIn0\n    = eyJmb28iOiJiw6VyIn0\n    (no change in this case)\n  2. base64 to DOMString: atob(eyJmb28iOiJiw6VyIn0)\n    = {\"foo\":\"bÃ¥r\"}\n    ->  \"å\" in UTF-8 encoding = 0xC3 0xA5\n        0xC3 0xA5 as UTF-16LE = Ã¥\n  3. DOMString to percent-encoding\n    = %7b%22%66%6f%6f%22%3a%22%62 %c3%a5 %72%22%7d\n    -> Ã¥ was encoded as %c3%a5 \n  4. Percent-encoded UTF-8 to DOMString\n    = {\"foo\":\"bår\"}\n    ->  URIs are always UTF-8, so decodeURIComponent knows to interpret the percent-encoded\n        string as UTF-8.\n        (As before, DOMStrings are UTF-16LE, so internally \"å\" is encoded as 0xE5 per UTF-16.)\n  Note: UTF-8 and UTF-16 are equivalent in the ASCII range 0x00 - 0x7f, so atob(base64) is OK\n  if it's known that the string uses only those characters.\n*/\n\n/**\n * Client-side check:\n * Determine whether the given JWT is present and unexpired\n *\n * @param {String} token JSON Web Token\n * @returns {Boolean}\n */\nexport function isJwtLocallyValid(token) {\n  try {\n    // Must be present\n    if (!token) {\n      return false;\n    }\n\n    // Must not be expired\n    const payload = getJwtPayload(token);\n    return new Date(payload.exp * 1000) > new Date();\n  } catch (error) {\n    return false;\n  }\n}\n\nexport function throwFormattedError(error) {\n  if (!error) return;\n  if (typeof error === \"string\") throw new Error(error);\n  if (error?.response?.data?.message) {\n    throw new Error(error.response.data.message);\n  }\n  throw error;\n}\n\nexport function isBrowser() {\n  return typeof window !== \"undefined\";\n}","import { store } from \"./store.js\";\nimport { getJwtPayload } from \"./utils.js\";\n\n/**\n * Define the store.user object based on the ID token\n */\nexport function setUser() {\n  if (!store.tokens.idToken) {\n    return console.warn(\"Cannot define user: missing ID token\");\n  }\n\n  store.user = store.user || {};\n  const idTokenPayload = getJwtPayload(store.tokens.idToken);\n\n  // Set basic user information properties from ID token\n  const propsToDefine = [\n    \"email\",\n    \"phoneNumber\",\n    \"username\",\n    \"name\",\n    \"image\",\n    \"data\",\n    \"createdAt\",\n    \"updatedAt\",\n    \"mode\",\n    \"userId\",\n    \"userUuid\",\n    \"tenantId\",\n    \"isEmailConfirmed\",\n    \"isPhoneNumberConfirmed\",\n    \"confirmedEmailAt\",\n    \"confirmedPhoneNumberAt\",\n    \"isMfaRequired\",\n    \"isConfirmed\", // Deprecated\n  ];\n  for (const prop of propsToDefine) {\n    if (prop === \"update\") return;\n    store.user[prop] = idTokenPayload[prop];\n  }\n}\n\n/**\n * Remove all user information\n */\nexport function unsetUser() {\n  for (const attr in store.user) {\n    if (typeof store.user[attr] !== \"function\") {\n      delete store.user[attr];\n    }\n  }\n}\n\n/**\n * Export the store.user object with the update method added\n */\nexport const user = store.user;\n","import axios from \"axios\";\nimport { store } from \"./store.js\";\n\n// Replace multiple slashes // with single slash / (except in the protocol)\nfunction reduceSlashes(str) {\n  return str.replace(/([^:]\\/)\\/+/g, \"$1\");\n}\n\n/**\n * Perform a GET request\n * @param {String} path\n * @param {Object} options\n * @returns {Object} response body\n */\nexport async function get(path, options) {\n  const url = reduceSlashes(`${store.baseUrl}${path}`);\n  return axios.get(url, options);\n}\n\n/**\n * Perform a POST request\n * @param {String} path\n * @param {Object} payload\n * @param {Object} options\n * @returns {Object} response body\n */\nexport async function post(path, payload, options) {\n  const url = reduceSlashes(`${store.baseUrl}${path}`);\n  return axios.post(url, payload, options);\n}\n\n/**\n * Perform a PUT request\n * @param {String} path\n * @param {Object} payload\n * @param {Object} options\n * @returns {Object} response body\n */\nexport async function put(path, payload, options) {\n  const url = reduceSlashes(`${store.baseUrl}${path}`);\n  return axios.put(url, payload, options);\n}\n\nexport default {\n  get,\n  post,\n  put,\n};\n","import Cookies from \"js-cookie\";\nimport { store } from \"./store.js\";\nimport { unsetTokens } from \"./tokens.js\";\n\n/**\n * Set a cookie value based on the given options.\n * @param {String} value\n * @param {Object} options\n * @param {String} type\n */\nexport function setCookie(value, options, type) {\n  const cookieName = `${type}.${store.tenantId}`;\n  options = options || {\n    secure: store.mode === \"live\",\n    sameSite: \"Lax\",\n  };\n  if (type === \"refresh\") {\n    options.sameSite = \"Strict\";\n  }\n  Cookies.set(cookieName, value, options);\n}\n\n/**\n * Remove a cookie by name, regardless of its cookie setting(s).\n * @param {String} name\n */\nfunction removeCookie(name) {\n  // Define all possible path and domain combinations\n  let paths, domains;\n  try {\n    const path = window.location.pathname;\n    const hostname = window.location.hostname;\n    const hostnameParts = hostname.split(\".\");\n    const primaryDomain = hostnameParts.slice(-2).join(\".\");\n    paths = [undefined, path, \"/\"];\n    domains = [\n      undefined,\n      hostname,\n      `.${hostname}`,\n      primaryDomain,\n      `.${primaryDomain}`,\n    ];\n  } catch (err) {\n    paths = [undefined, \"/\"];\n    domains = [undefined];\n  }\n\n  // Iterate over paths and domains, and remove cookies if present\n  paths.map((path) => {\n    domains.map((domain) => {\n      const options = {};\n      if (domain) options.domain = domain;\n      if (path) options.path = path;\n      Cookies.remove(name, options);\n    });\n  });\n}\n\n/**\n * Remove all auth cookies (access, id, refresh).\n */\nexport function removeAllCookies() {\n  removeCookie(store.tokens.accessTokenName);\n  removeCookie(store.tokens.idTokenName);\n  removeCookie(store.tokens.refreshTokenName);\n  unsetTokens();\n}\n","import Cookies from \"js-cookie\";\nimport { store } from \"./store.js\";\nimport { setUser, unsetUser } from \"./user.js\";\nimport { refresh } from \"./refresh.js\";\nimport { isJwtLocallyValid } from \"./utils.js\";\nimport { setCookiesAndTokens } from \"./authentication.js\";\nimport { exchange } from \"./refresh.js\";\n\nstore.tokens = store.tokens || {};\nstore.tokens.refresh = refresh;\n\nexport function setTokenNames() {\n  store.tokens = store.tokens || {};\n  store.tokens.accessTokenName = `access.${store.tenantId}`;\n  store.tokens.idTokenName = `id.${store.tenantId}`;\n  store.tokens.refreshTokenName = `refresh.${store.tenantId}`;\n}\n\n/**\n * Set and then return the access token\n */\nexport function accessToken() {\n  store.tokens.accessToken = Cookies.get(store.tokens.accessTokenName);\n  return store.tokens.accessToken;\n}\n\n/**\n * Set and then return the ID token\n */\nexport function idToken() {\n  store.tokens.idToken = Cookies.get(store.tokens.idTokenName);\n  return store.tokens.idToken;\n}\n\n/**\n * Define the store token values from the cookie values.\n */\nexport function setTokensFromCookies() {\n  const tokenNames = [\"access\", \"id\", \"refresh\"];\n  tokenNames.map((tokenName) => {\n    try {\n      const token = Cookies.get(store.tokens[`${tokenName}TokenName`]);\n      store.tokens[`${tokenName}Token`] = token;\n\n      // Set the user object whenever the ID token is set\n      if (tokenName === \"id\" && token) {\n        setUser();\n      }\n    } catch (error) {\n      console.warn(`Problem setting ${tokenName} token.`);\n    }\n  });\n}\n\n/**\n * Set the store token values to undefined\n */\nexport function unsetTokens() {\n  store.tokens.accessToken = undefined;\n  store.tokens.idToken = undefined;\n  store.tokens.refreshToken = undefined;\n  unsetUser();\n}\n\n/**\n * Client-side check:\n * Determine whether the access token is present and unexpired\n * @returns {Boolean}\n */\nexport function isAccessTokenLocallyValid() {\n  return isJwtLocallyValid(store.tokens.accessToken);\n}\n\n/**\n * Client-side check:\n * Determine whether the refresh token is present and unexpired\n * @returns {Boolean}\n */\nexport function isRefreshTokenLocallyValid() {\n  return isJwtLocallyValid(store.tokens.refreshToken);\n}\n\n/**\n * Set the cookies and store.tokens based on a tokens object\n * @property {Object} tokens An object containing JWT access, refresh, and ID tokens\n * @property {Object} data The response object from the API\n * @returns\n */\nexport async function defaultHandleTokens(tokens, data) {\n  setCookiesAndTokens(tokens);\n  await exchange(data);\n}\n\n/**\n * Export the store.tokens object\n */\nexport const tokens = store.tokens;\n\n// NOTE Commenting this out 6/11/21 because the packages it relies on (jsonwebtoken & jwks-rsa)\n// both cause a lot of bloat. If we want to verify tokens, this is a nice way to do it, but\n// we need to find libraries designed for the browser instead of node.\n/**\n * Verify the provided token\n * @param {String} token\n * @returns {Promise<void>} The provided token has been verified if `verifyToken` resolves without error\n */\n// export async function verifyToken(token) {\n//   if (!token) throw new Error(\"Missing token\");\n\n//   let publicKey;\n//   try {\n//     const decodedToken = jwt.decode(token, { complete: true });\n//     if (!decodedToken.header || !decodedToken.header.kid) {\n//       throw new Error(\"Token kid not defined\");\n//     }\n\n//     const client = new JwksClient({\n//       jwksUri: `${apiUrl}tenants/${store.tenantId}/jwks/${store.mode}`,\n//       requestHeaders: { origin: window.location.origin },\n//     });\n\n//     const key = await client.getSigningKey(decodedToken.header.kid);\n//     publicKey = key.getPublicKey();\n//   } catch (error) {\n//     throw error;\n//   }\n\n//   if (!publicKey) {\n//     throw new Error(\"Public key not found\");\n//   }\n\n//   try {\n//     jwt.verify(token, publicKey);\n//   } catch (error) {\n//     throw new Error(\"Token verification failed\");\n//   }\n\n//   return Promise.resolve();\n// }\n","import { store } from \"./store.js\";\nimport { authenticationData } from \"./authentication.js\";\n\n/**\n * Set authenticationData.firstFactors from the authentication object\n * @param {Object} authentication\n * {\n *   firstFactors,\n *   secondFactors\n * }\n * @returns\n */\nexport function setFirstFactors(authentication) {\n  // If we're not initialized, there are no first factors.\n  if (!store.tenantId) {\n    console.warn(\n      \"setFirstFactors: tried to set factors without a tenantId set.\"\n    );\n    return;\n  }\n  // If we're passed an invalid argument, keep the authentication data as is.\n  if (\n    !authentication ||\n    typeof authentication !== \"object\" ||\n    !Array.isArray(authentication.firstFactors)\n  ) {\n    console.warn(\"setFirstFactors: invalid factors passed.\");\n    return;\n  }\n  authenticationData.firstFactors = authentication.firstFactors;\n}\n\n/**\n * Check if MFA is required for the ongoing signup or login flow.\n * @returns {Boolean} true if MFA is currently required\n */\nexport function isFirstFactorTokenPresent() {\n  return !!authenticationData.firstFactorToken;\n}\n\n/**\n * Update the MFA service state given a response to a signup or login call.\n * Adds secondFactors and firstFactorToken if it is a MFA Required response,\n * removes them if it is a successful signup or login,\n * leaves the service unchanged otherwise.\n * @param {Object} data\n */\nexport function defaultHandleMfaRequired(firstFactorToken, data) {\n  if (!data.isMfaRequired) {\n    // If we've logged in or signed up successfully,\n    // clear the MFA service state.\n    if (data.message === \"OK\") {\n      clearMfa();\n    }\n    return;\n  }\n  authenticationData.firstFactorToken = firstFactorToken;\n  authenticationData.secondFactors = data.authentication.secondFactors;\n}\n\n/**\n * If MFA is required, returns a headers object with authorization set to the firstFactorToken.\n * Otherwise, returns an empty object.\n * @returns {Object} a headers object with MFA authorization header set, or empty if MFA is not required\n */\nexport function getMfaHeaders() {\n  if (authenticationData.firstFactorToken) {\n    return {\n      authorization: `Bearer ${authenticationData.firstFactorToken}`,\n    };\n  }\n  return {};\n}\n\n/**\n * Clears the current transient state of the MFA service,\n * leaving the tenant's persistent state in place.\n */\nexport function clearMfa() {\n  authenticationData.secondFactors = [];\n  authenticationData.firstFactorToken = null;\n}\n\n/**\n * Fully resets the MFA service, including the tenant's persistent state,\n * to it uninitialized state.\n */\nexport function resetMfa() {\n  clearMfa();\n  authenticationData.firstFactors = [];\n}\n","import {\n  isAccessTokenLocallyValid,\n  isRefreshTokenLocallyValid,\n} from \"./tokens.js\";\nimport { authenticationData } from \"./authentication.js\";\nimport { isFirstFactorTokenPresent, clearMfa } from \"./mfa.js\";\nimport { refresh } from \"./refresh.js\";\n\n/**\n * Determine whether a user is logged in by checking their\n * JWT access token and, if invalid, refreshing it and checking\n * again.\n * @returns {Promise<Boolean>}\n */\nasync function getIsLoggedIn() {\n  try {\n    // If the access token is locally valid, return true\n    if (isAccessTokenLocallyValid()) {\n      return true;\n    }\n\n    // If the refresh token is locally invalid, return false\n    if (!isRefreshTokenLocallyValid()) {\n      return false;\n    }\n\n    // Attempt to refresh the access token\n    await refresh();\n\n    // The access token should now be valid\n    return isAccessTokenLocallyValid();\n  } catch (error) {\n    return false;\n  }\n}\n\n/**\n * Return detailed information about the current session.\n * @returns {Promise<Object>}\n */\nexport async function getSession() {\n  const isLoggedIn = await getIsLoggedIn();\n  return {\n    isLoggedIn,\n    needsSecondFactor: isFirstFactorTokenPresent(),\n    firstFactors: authenticationData.firstFactors,\n    secondFactors: authenticationData.secondFactors,\n    resetMfaState: clearMfa,\n  };\n}\n","import { getQueryAttr } from \"./url.js\";\nimport { isBrowser } from \"./utils.js\";\n\nexport const store = {\n  codeChallenge: \"\",\n  get usePkce() {\n    return !!store.codeChallenge;\n  },\n};\n\n/**\n * Reads an unexpired challenge code from local storage\n * @returns {string?} the challenge code, if an unexpired one is in local storage\n */\nexport function readPkceDataFromLocalStorage() {\n  if (!isBrowser()) {\n    return;\n  }\n  const codeChallenge = window.localStorage.getItem(\"uf_pkce_code_challenge\");\n  if (codeChallenge) {\n    const expiresAt = window.localStorage.getItem(\n      \"uf_pkce_code_challenge_expiresAt\"\n    );\n    if (expiresAt && parseInt(expiresAt, 10) > Date.now()) {\n      return codeChallenge;\n    }\n  }\n}\n\n/**\n * Write a challenge code to local storage, expiring in 5 minutes\n * @param {string} codeChallenge\n * @returns\n */\nexport function writePkceDataToLocalStorage(codeChallenge) {\n  if (!isBrowser()) {\n    return;\n  }\n  if (!codeChallenge) {\n    return clearPkceDataFromLocalStorage();\n  }\n  store.codeChallenge = codeChallenge;\n  const expiresAt = Date.now() + 1000 * 60 * 5; // 5 minutes from now\n  try {\n    window.localStorage.setItem(\"uf_pkce_code_challenge\", codeChallenge);\n    window.localStorage.setItem(\"uf_pkce_code_challenge_expiresAt\", expiresAt);\n  } catch (err) {\n    // Suppress exception from full local storage\n  }\n}\n\n/**\n * Clear the challenge code and expiration from local storage\n */\nexport function clearPkceDataFromLocalStorage() {\n  if (!isBrowser()) {\n    return;\n  }\n  window.localStorage.removeItem(\"uf_pkce_code_challenge\");\n  window.localStorage.removeItem(\"uf_pkce_code_challenge_expiresAt\");\n}\n\n/**\n * Set up the PKCE service: look for a PKCE challenge code in\n * query params or local storage. If both are present, the query\n * param is preferred.\n * @returns {Boolean} true if we should use PKCE in our auth requests\n */\nexport function setupPkce() {\n  if (!isBrowser()) {\n    return;\n  }\n  const codeChallengeFromQueryParams = getQueryAttr(\"code_challenge\");\n  if (codeChallengeFromQueryParams) {\n    store.codeChallenge = codeChallengeFromQueryParams;\n    writePkceDataToLocalStorage(codeChallengeFromQueryParams);\n    return true;\n  }\n  const codeChallengeFromLocalStorage = readPkceDataFromLocalStorage();\n  if (codeChallengeFromLocalStorage) {\n    store.codeChallenge = codeChallengeFromLocalStorage;\n    return true;\n  }\n  clearPkceDataFromLocalStorage();\n  return false;\n}\n\n/**\n * Get (possibly empty) PKCE query params to attach to an auth request\n * @returns {object} an object to be used for an Axios request's params field\n */\nexport function getPkceRequestQueryParams() {\n  if (!store.usePkce) {\n    return {};\n  }\n  return { code_challenge: store.codeChallenge };\n}\n\n/**\n * Redirect to url with PKCE query params (authorization_code) set. Does not redirect\n * if url or authorizationCode are falsy.\n *\n * @param {string} url full URL to redirect to (may be a deep link for a mobile app)\n * @param {string} authorizationCode the authorization code received from the server\n * @returns\n */\nexport function defaultHandlePkceRequired(authorizationCode, url, data) {\n  if (!url || !authorizationCode) {\n    return;\n  }\n  if (!store.usePkce) {\n    console.warn(\n      \"Redirecting with a PKCE authorization code, but no PKCE challenge code is present in the client. This is unexpected.\"\n    );\n  }\n  const _url = new URL(url);\n  _url.searchParams.set(\"authorization_code\", authorizationCode);\n  clearPkceDataFromLocalStorage();\n  window.location.assign(_url.href);\n}\n","import { get } from \"./api.js\";\nimport { store } from \"./store.js\";\nimport { removeAllCookies } from \"./cookies.js\";\nimport { getSession } from \"./session.js\";\nimport { store as pkceStore } from \"./pkce.js\";\n\n/**\n * Get the value of a query attribute, e.g. ?attr=value\n * @param {String} attrName\n */\nexport function getQueryAttr(attrName) {\n  if (\n    typeof window !== \"object\" ||\n    typeof window.location !== \"object\" ||\n    !window.location.href ||\n    window.location.href.indexOf(`${attrName}=`) < 0\n  ) {\n    return;\n  }\n  return decodeURIComponent(\n    window.location.href.split(`${attrName}=`)[1].split(\"&\")[0]\n  );\n}\n\n/**\n * Redirect the browser based on explicit redirect input path, or the API response\n * @property {String|Boolean} redirect A path to redirect to, or false to not redirect\n * @property {Object} data The response object from the API\n * @returns\n */\nexport const defaultHandleRedirect = (redirect, data) => {\n  if (redirect === false) return;\n  // If redirect is the boolean true, redirect to the default redirect path, not to \"/true\"\n  if (redirect === true) {\n    const path = getQueryAttr(\"redirect\") || data.redirectTo || \"/\";\n    redirectToPath(path);\n    return;\n  }\n  const path = redirect || getQueryAttr(\"redirect\") || data.redirectTo || \"/\";\n  redirectToPath(path);\n};\n\n/**\n * If the access token is valid, redirect the browser to the\n * tenant's After-login path.\n */\nexport async function redirectIfLoggedIn({ redirect } = {}) {\n  const { isLoggedIn } = await getSession();\n  if (!isLoggedIn) {\n    return removeAllCookies();\n  }\n\n  // TODO see #130: can handle this more elegantly once we have an exchange tokens -> authorizationCode\n  // endpoint on the server.\n  // If this is a PKCE auth session, don't redirect with this function ever.\n  // The only way to get an authorizationCode currently is to go through an auth flow.\n  // The PKCE module handles redirect after a PKCE Required response is received.\n  if (pkceStore.usePkce) {\n    return;\n  }\n\n  // Redirect to a provided path (check options first, then url querystring)\n  if (redirect) {\n    return redirectToPath(redirect);\n  } else if (getQueryAttr(\"redirect\")) {\n    return redirectToPath(getQueryAttr(\"redirect\"));\n  }\n\n  // If no path was provided, look up the path and then redirect there\n  try {\n    const { data } = await get(`/self`, {\n      headers: {\n        authorization: `Bearer ${store.tokens.accessToken}`,\n      },\n    });\n    if (data.tenant && data.tenant.loginRedirectPath) {\n      redirectToPath(data.tenant.loginRedirectPath);\n    }\n  } catch (err) {\n    removeAllCookies();\n  }\n}\n\n/**\n * If the access token is invalid, redirect the browser to the\n * provided path.\n */\nexport async function redirectIfLoggedOut({ redirect } = {}) {\n  // If the user is logged in, return without doing anything\n  const { isLoggedIn } = await getSession();\n  if (isLoggedIn) {\n    return;\n  }\n\n  // Remove all cookies\n  removeAllCookies();\n\n  // Redirect to a provided path (check options first, then url querystring)\n  if (redirect) {\n    return redirectToPath(redirect);\n  } else if (getQueryAttr(\"redirect\")) {\n    return redirectToPath(getQueryAttr(\"redirect\"));\n  }\n\n  // If no redirect path was provided, do not redirect\n  return;\n}\n\n/**\n * Redirect to path portion of a URL.\n */\nexport function redirectToPath(pathOrUrl) {\n  // Return if no pathOrUrl, or if SSR or mobile\n  if (\n    !pathOrUrl ||\n    typeof document !== \"object\" ||\n    typeof window !== \"object\"\n  ) {\n    return;\n  }\n  try {\n    document && window;\n  } catch (error) {\n    return;\n  }\n\n  // Perform hard redirect\n  const el = document.createElement(\"a\");\n  el.href = pathOrUrl;\n  let path = `${el.pathname}${el.hash}${el.search}`;\n  if (el.pathname !== window.location.pathname) {\n    window.location.assign(path);\n  }\n}\n","import { defaultHandleTokens, setTokensFromCookies } from \"./tokens.js\";\nimport { setCookie } from \"./cookies.js\";\nimport { defaultHandleRedirect, getQueryAttr } from \"./url.js\";\nimport { defaultHandlePkceRequired } from \"./pkce.js\";\nimport { defaultHandleMfaRequired } from \"./mfa.js\";\n\n// Data specific to the MFA service\nexport const authenticationData = {\n  firstFactors: [],\n  secondFactors: [],\n  firstFactorToken: null,\n};\n\n/**\n * Set the cookies from a tokens object, and add to the local store.\n * @param {Object} tokens\n */\nexport function setCookiesAndTokens(tokens) {\n  setCookie(tokens.access.value, tokens.access.cookieOptions, \"access\");\n  setCookie(tokens.id.value, tokens.id.cookieOptions, \"id\");\n  if (tokens.refresh && tokens.refresh.value) {\n    setCookie(tokens.refresh.value, tokens.refresh.cookieOptions, \"refresh\");\n  }\n  setTokensFromCookies();\n}\n\n/**\n * Handle the API response for an authentication request\n * @property {Object} data\n * @property {String|Boolean} redirect\n * @property {Function} handleUpstreamResponse\n * @property {Function} handleMfaRequired\n * @property {Function} handlePkceRequired\n * @property {Function} handleTokens\n * @property {Function} handleRedirect\n * @returns {Object} data (or redirection)\n */\nexport async function handleLoginResponse({\n  data,\n  redirect,\n  handleUpstreamResponse,\n  handleMfaRequired,\n  handlePkceRequired,\n  handleTokens,\n  handleRedirect,\n}) {\n  let redirectValue =\n    redirect || getQueryAttr(\"redirect\") || data.redirectTo || \"/\";\n\n  // Handle upstreamResponse\n  if (typeof handleUpstreamResponse === \"function\") {\n    await handleUpstreamResponse(data.upstreamResponse, data);\n  }\n\n  // Handle \"MFA required\" response\n  if (data.hasOwnProperty(\"firstFactorToken\")) {\n    if (typeof handleMfaRequired === \"function\") {\n      await handleMfaRequired(data.firstFactorToken, data);\n    } else {\n      defaultHandleMfaRequired(data.firstFactorToken, data);\n    }\n    return data;\n  }\n\n  // Handle tokens\n  if (data.hasOwnProperty(\"tokens\")) {\n    if (typeof handleTokens === \"function\") {\n      await handleTokens(data.tokens, data);\n    } else {\n      await defaultHandleTokens(data.tokens, data);\n    }\n  }\n\n  // Handle \"PKCE required\" response\n  if (data.hasOwnProperty(\"authorizationCode\")) {\n    if (!redirectValue) {\n      throw new Error(\"Missing PKCE redirect url\");\n    }\n    if (typeof handlePkceRequired === \"function\") {\n      await handlePkceRequired(data.authorizationCode, redirectValue, data);\n    } else {\n      defaultHandlePkceRequired(data.authorizationCode, redirectValue, data);\n      return data;\n    }\n  }\n\n  // Handle redirection\n  if (data.hasOwnProperty(\"redirectTo\") && redirect !== false) {\n    if (typeof handleRedirect === \"function\") {\n      await handleRedirect(redirectValue, data);\n    } else {\n      defaultHandleRedirect(redirectValue, data);\n    }\n  }\n\n  return data;\n}\n","import Cookies from \"js-cookie\";\nimport { get } from \"./api.js\";\nimport { setCookiesAndTokens } from \"./authentication.js\";\nimport { store } from \"./store.js\";\n// import { getIframe, postMessageAsPromise } from \"./iframe.js\";\nimport { throwFormattedError } from \"./utils.js\";\n\n/**\n * Refresh the access and ID tokens\n * - When in test mode, uses the basic refresh method\n * - For tenants without a custom SSL certificate, uses the basic refresh method\n * - For tenants with a custom SSL certificate and in live mode, uses the httpOnly refresh method\n * @returns {Promise}\n */\nexport async function refresh() {\n  try {\n    await basicRefresh();\n  } catch (error) {\n    console.warn(`Refresh failed: ${error.message}`);\n  }\n}\n\n/**\n * Use a regular (non-httpOnly) cookie to refresh the access and ID tokens.\n *\n * The basic refresh method is used automatically in test mode and in live\n * mode whenever an SSL certificate has not been set up.\n */\nasync function basicRefresh() {\n  const refreshToken = Cookies.get(store.tokens.refreshTokenName);\n  try {\n    const { data, status } = await get(`/auth/refresh`, {\n      headers: {\n        authorization: `Bearer ${refreshToken}`,\n      },\n    });\n    if (status !== 200) {\n      throw new Error(data.message || \"Problem with request\");\n    }\n    if (data.tokens) {\n      setCookiesAndTokens(data.tokens);\n      return data;\n    } else {\n      throw new Error(\"Problem setting cookies\");\n    }\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n\n// TODO re-enable httpOnly refresh method once new endpoints are stable [06/15/21]\n/**\n *\n * The httpOnly refresh method is only available for tenants with configured\n * SSL certificates while in live mode.\n */\n// async function httpOnlyRefresh() {\n//   const iframe = getIframe();\n//   if (!iframe) return;\n//   return postMessageAsPromise({\n//     type: \"refresh\",\n//     tenantId: store.tenantId,\n//   });\n// }\n\n/**\n * Use a sessionId and nonce to set the iframe refresh token\n * @param {String} sessionId\n * @param {String} nonce\n * @returns {Promise}\n */\nexport async function exchange({ sessionId, nonce }) {\n  return;\n\n  // TODO re-enable httpOnly exchange method once new endpoints are stable [06/15/21]\n  // --------------------------\n  // const iframe = getIframe();\n  // if (!iframe) return;\n  // return postMessageAsPromise({\n  //   type: \"exchange\",\n  //   tenantId: store.tenantId,\n  //   payload: {\n  //     sessionId,\n  //     nonce,\n  //   },\n  // });\n}\n","import { post, put } from \"./api.js\";\nimport { setCookiesAndTokens } from \"./authentication.js\";\nimport { store } from \"./store.js\";\nimport { getQueryAttr, defaultHandleRedirect } from \"./url.js\";\nimport { throwFormattedError } from \"./utils.js\";\nimport { handleLoginResponse } from \"./authentication.js\";\nimport { getMfaHeaders } from \"./mfa.js\";\nimport { getPkceRequestQueryParams } from \"./pkce.js\";\n\n/**\n * Register a new user with username, name, email, and password.\n * Redirect the browser after successful signup based on the redirectTo value returned.\n * @property {String} username\n * @property {String} name\n * @property {String} email\n * @property {String} password\n * @property {Object} userData - alias for the user.data object, since \"data\" is used in the response\n * @property {String} redirect - do not redirect if false, or redirect to a specific path\n * @property {Function} handleUpstreamResponse\n * @property {Function} handleMfaRequired\n * @property {Function} handlePkceRequired\n * @property {Function} handleTokens\n * @property {Function} handleRedirect\n */\nexport async function signupWithPassword({\n  username,\n  name,\n  email,\n  password,\n  userData,\n  redirect,\n  handleUpstreamResponse,\n  handleMfaRequired,\n  handlePkceRequired,\n  handleTokens,\n  handleRedirect,\n} = {}) {\n  try {\n    const { tenantId } = store;\n    const { data } = await post(\n      `/tenants/${tenantId}/auth/create`,\n      {\n        username,\n        name,\n        email,\n        password,\n        data: userData,\n      },\n      {\n        headers: getMfaHeaders(),\n        params: getPkceRequestQueryParams(),\n      }\n    );\n\n    // Handle the API response to the login request\n    return handleLoginResponse({\n      data,\n      redirect,\n      handleUpstreamResponse,\n      handleMfaRequired,\n      handlePkceRequired,\n      handleTokens,\n      handleRedirect,\n    });\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n\n/**\n * Log a user in with email/username and password.\n * Redirect the browser after successful login based on the redirectTo value returned.\n * @property {String} email The user's email. One of email/username/emailOrUsername should be present.\n * @property {String} username The user's username. One of email/username/emailOrUsername should be present.\n * @property {String} emailOrUsername Either the user's email or username. One of email/username/emailOrUsername should be present.\n * @property {String} password\n * @property {String|Boolean} redirect\n *  URL to redirect to after login, or false to suppress redirect. Otherwise, redirects to the after-login path set on the server.\n * @property {Function} handleUpstreamResponse\n * @property {Function} handleMfaRequired\n * @property {Function} handlePkceRequired\n * @property {Function} handleTokens\n * @property {Function} handleRedirect\n * @property {Object} options\n * @property {Boolean} options.noResetEmail\n *  By default, Userfront sends a password reset email if a user without a password tries to log in with a password.\n *  Set options.noResetEmail = true to override this behavior and return an error instead.\n *\n */\nexport async function loginWithPassword({\n  email,\n  username,\n  emailOrUsername,\n  password,\n  redirect,\n  handleUpstreamResponse,\n  handleMfaRequired,\n  handlePkceRequired,\n  handleTokens,\n  handleRedirect,\n  options,\n}) {\n  try {\n    const body = {\n      emailOrUsername: email || username || emailOrUsername,\n      password,\n    };\n    if (options && options.noResetEmail) {\n      body.options = {\n        noResetEmail: true,\n      };\n    }\n    const { tenantId } = store;\n    const { data } = await post(`/tenants/${tenantId}/auth/basic`, body, {\n      headers: getMfaHeaders(),\n      params: getPkceRequestQueryParams(),\n    });\n\n    // Handle the API response to the login request\n    return handleLoginResponse({\n      data,\n      redirect,\n      handleUpstreamResponse,\n      handleMfaRequired,\n      handlePkceRequired,\n      handleTokens,\n      handleRedirect,\n    });\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n\n/**\n * Send a password reset link to the provided email.\n * @param {String} email\n */\nexport async function sendResetLink(email) {\n  try {\n    const { tenantId } = store;\n    const { data } = await post(`/tenants/${tenantId}/auth/reset/link`, {\n      email,\n    });\n    return data;\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n\n/**\n * Set a user's password with their link credentials or JWT access token.\n *\n * If no method is provided, the order is:\n * - Check for link credentials; then\n * - Check for a JWT access token first\n *\n * @property {String} method (optional) \"link\" or \"jwt\"\n * @property {String} password\n * @property {String} existingPassword\n * @property {String} uuid\n * @property {String} token\n * @property {String} redirect\n * @property {Function} handleUpstreamResponse -\n * @property {Function} handleMfaRequired\n * @property {Function} handlePkceRequired\n * @property {Function} handleTokens\n * @property {Function} handleRedirect\n * @returns\n */\nexport async function updatePassword({\n  method,\n  password,\n  existingPassword,\n  uuid,\n  token,\n  redirect,\n  handleUpstreamResponse,\n  handleMfaRequired,\n  handlePkceRequired,\n  handleTokens,\n  handleRedirect,\n}) {\n  switch (method) {\n    // Allow for explicit setting of method\n    case \"link\":\n      return updatePasswordWithLink({\n        uuid,\n        token,\n        password,\n        redirect,\n        handleUpstreamResponse,\n        handleMfaRequired,\n        handlePkceRequired,\n        handleTokens,\n        handleRedirect,\n      });\n    case \"jwt\":\n      return updatePasswordWithJwt({ password, existingPassword });\n    default:\n      // Default (no method provided) is to look for link credentials first, then JWT access token\n      token = token || getQueryAttr(\"token\");\n      uuid = uuid || getQueryAttr(\"uuid\");\n      if (uuid && token) {\n        return updatePasswordWithLink({\n          uuid,\n          token,\n          password,\n          redirect,\n          handleUpstreamResponse,\n          handleMfaRequired,\n          handlePkceRequired,\n          handleTokens,\n          handleRedirect,\n        });\n      } else if (store.tokens.accessToken) {\n        return updatePasswordWithJwt({ password, existingPassword });\n      } else {\n        throw new Error(\n          \"updatePassword() was called without link credentials (token & uuid) or a JWT access token.\"\n        );\n      }\n  }\n}\n\nexport const resetPassword = updatePassword;\n\nexport async function updatePasswordWithLink({\n  uuid,\n  token,\n  password,\n  redirect,\n  handleUpstreamResponse,\n  handleMfaRequired,\n  handlePkceRequired,\n  handleTokens,\n  handleRedirect,\n}) {\n  try {\n    token = token || getQueryAttr(\"token\");\n    uuid = uuid || getQueryAttr(\"uuid\");\n    if (!token || !uuid) throw new Error(\"Missing token or uuid\");\n    const { tenantId } = store;\n    const { data } = await put(`/tenants/${tenantId}/auth/reset`, {\n      uuid,\n      token,\n      password,\n    });\n    return handleLoginResponse({\n      data,\n      redirect,\n      handleUpstreamResponse,\n      handleMfaRequired,\n      handlePkceRequired,\n      handleTokens,\n      handleRedirect,\n    });\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n\nexport async function updatePasswordWithJwt({ password, existingPassword }) {\n  try {\n    if (!store.tokens.accessToken) {\n      throw new Error(\n        `updatePassword({ method: \"jwt\" }) was called without a JWT access token.`\n      );\n    }\n\n    const { tenantId } = store;\n    const { data } = await put(\n      `/tenants/${tenantId}/auth/basic`,\n      {\n        password,\n        existingPassword,\n      },\n      {\n        headers: {\n          Authorization: `Bearer ${store.tokens.accessToken}`,\n        },\n      }\n    );\n\n    return data;\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n","import { store } from \"./store.js\";\nimport { getQueryAttr } from \"./url.js\";\n\nexport function getProviderLink({ provider, redirect, providerId }) {\n  if (!provider) {\n    throw new Error(\"Missing provider\");\n  }\n  if (!store.tenantId) {\n    throw new Error(\"Missing tenantId\");\n  }\n  if (provider === \"custom\" && !providerId) {\n    throw new Error(\"Missing providerId\");\n  }\n\n  const url = new URL(`${store.baseUrl}auth/${provider}/login`);\n  url.searchParams.append(\"origin\", window.location.origin);\n  url.searchParams.append(\"tenant_id\", store.tenantId);\n\n  if (provider === \"custom\") {\n    url.searchParams.append(\"provider_id\", providerId);\n  }\n\n  let redirectTo = redirect || getQueryAttr(\"redirect\");\n  if (redirect === false) {\n    redirectTo = typeof document === \"object\" && document.location.pathname;\n  }\n  if (redirectTo) {\n    url.searchParams.append(\"redirect\", redirectTo);\n  }\n\n  // https://api.userfront.com/v0/auth/linkedin/login?tenant_id=abcdefg&origin=https%3A%2F%2Fexample.com&redirect=%2Fdashboard\n  return url.toString();\n}\n\n/**\n * Log in or register a user via SSO provider.\n * Redirect the browser after successful authentication and 302 redirect from server.\n * @param {String} provider Name of SSO provider\n * @param {String} [redirect] - do not redirect if false, or redirect to given path\n * @param {String} [providerId] Provider ID of custom provider (only required for `{ provider: 'custom sso' }`)\n */\nexport function signonWithSso({ provider, redirect, providerId }) {\n  if (!provider) throw new Error(\"Missing provider\");\n  const url = getProviderLink({ provider, redirect, providerId });\n  window.location.assign(url);\n}\n","import { post, put } from \"./api.js\";\nimport { store } from \"./store.js\";\nimport { getQueryAttr } from \"./url.js\";\nimport { throwFormattedError } from \"./utils.js\";\nimport { handleLoginResponse } from \"./authentication.js\";\nimport { getMfaHeaders } from \"./mfa.js\";\nimport { getPkceRequestQueryParams } from \"./pkce.js\";\n\n/**\n * Log a user in with a token/uuid combo passed into the function or\n * in the URL querystring. ?token=...&uuid=...\n * @property {String} token\n * @property {UUID} uuid\n * @property {String} redirect - do not redirect if false, or redirect to given path\n * @property {Function} handleUpstreamResponse\n * @property {Function} handleMfaRequired\n * @property {Function} handlePkceRequired\n * @property {Function} handleTokens\n * @property {Function} handleRedirect\n */\nexport async function loginWithLink({\n  token,\n  uuid,\n  redirect,\n  handleUpstreamResponse,\n  handleMfaRequired,\n  handlePkceRequired,\n  handleTokens,\n  handleRedirect,\n} = {}) {\n  try {\n    token = token || getQueryAttr(\"token\");\n    uuid = uuid || getQueryAttr(\"uuid\");\n    if (!token || !uuid) return;\n\n    const { tenantId } = store;\n\n    const { data } = await put(\n      `/tenants/${tenantId}/auth/link`,\n      {\n        token,\n        uuid,\n      },\n      {\n        headers: getMfaHeaders(),\n        params: getPkceRequestQueryParams(),\n      }\n    );\n\n    // Handle the API response to the login request\n    return handleLoginResponse({\n      data,\n      redirect,\n      handleUpstreamResponse,\n      handleMfaRequired,\n      handlePkceRequired,\n      handleTokens,\n      handleRedirect,\n    });\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n\n/**\n * Send a login link to the provided email.\n * @param {String} email\n */\nexport async function sendLoginLink(email) {\n  try {\n    const { tenantId } = store;\n\n    const { data } = await post(`/tenants/${tenantId}/auth/link`, {\n      email,\n    });\n    return data;\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n\n/**\n * Create or update a user and send them a link to log in.\n * @param {Object} inputs\n */\nexport async function sendPasswordlessLink({\n  email,\n  name,\n  username,\n  userData,\n  options,\n}) {\n  try {\n    const { tenantId } = store;\n\n    const { data } = await post(`/tenants/${tenantId}/auth/link`, {\n      email,\n      name,\n      username,\n      data: userData,\n      options,\n    });\n    return data;\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n","import { post, put } from \"./api.js\";\nimport { store } from \"./store.js\";\nimport { throwFormattedError } from \"./utils.js\";\nimport { handleLoginResponse } from \"./authentication.js\";\nimport { getMfaHeaders, isFirstFactorTokenPresent } from \"./mfa.js\";\nimport { getPkceRequestQueryParams } from \"./pkce.js\";\n\n/**\n * Verify that proper identifier is available for the channel\n * @property {String} channel \"sms\" or \"email\"\n * @property {String} phoneNumber\n * @property {String} email\n */\nfunction enforceChannel({ channel, phoneNumber, email }) {\n  // Enforce valid channels\n  if (channel !== \"sms\" && channel !== \"email\") {\n    throw new Error(\"Invalid channel\");\n  }\n\n  // Do not require phoneNumber or email when firstFactorToken is included\n  if (isFirstFactorTokenPresent()) {\n    return;\n  }\n\n  // Check that phoneNumber or email are present if needed\n  if (channel === \"sms\" && !phoneNumber) {\n    throw new Error(`SMS verification code requires \"phoneNumber\"`);\n  } else if (channel === \"email\" && !email) {\n    throw new Error(`Email verification code requires \"email\"`);\n  }\n}\n\n/**\n * Send a verification code to the provided email address or phone number.\n * @property {String} channel \"sms\" (default) or \"email\"\n * @property {String} phoneNumber\n * @property {String} email\n * @property {String} name\n * @property {String} username\n * @property {Object} data\n */\nexport async function sendVerificationCode({\n  channel = \"sms\",\n  phoneNumber,\n  email,\n  name,\n  username,\n  data,\n}) {\n  try {\n    enforceChannel({\n      channel,\n      phoneNumber,\n      email,\n    });\n\n    const { tenantId } = store;\n\n    const { data: res } = await post(\n      `/tenants/${tenantId}/auth/code`,\n      {\n        channel,\n        email,\n        phoneNumber,\n        name,\n        username,\n        data,\n      },\n      {\n        headers: getMfaHeaders(),\n      }\n    );\n    return res;\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n\n/**\n * Log a user in with a token/uuid combo passed into the function or\n * in the URL querystring. ?token=...&uuid=...\n * @param {String} token\n * @param {UUID} uuid\n * @param {String} redirect - do not redirect if false, or redirect to given path\n */\nexport async function loginWithVerificationCode({\n  channel,\n  verificationCode,\n  email,\n  phoneNumber,\n  redirect,\n  handleUpstreamResponse,\n  handleMfaRequired,\n  handlePkceRequired,\n  handleTokens,\n  handleRedirect,\n} = {}) {\n  try {\n    enforceChannel({\n      channel,\n      phoneNumber,\n      email,\n    });\n\n    const { tenantId } = store;\n    const { data } = await put(\n      `/tenants/${tenantId}/auth/code`,\n      {\n        channel,\n        verificationCode,\n        email,\n        phoneNumber,\n      },\n      {\n        headers: getMfaHeaders(),\n        params: getPkceRequestQueryParams(),\n      }\n    );\n\n    // Handle the API response to the login request\n    return handleLoginResponse({\n      data,\n      redirect,\n      handleUpstreamResponse,\n      handleMfaRequired,\n      handlePkceRequired,\n      handleTokens,\n      handleRedirect,\n    });\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n","import { get, post } from \"./api.js\";\nimport { store } from \"./store.js\";\nimport { throwFormattedError } from \"./utils.js\";\nimport { handleLoginResponse } from \"./authentication.js\";\nimport { isFirstFactorTokenPresent, getMfaHeaders } from \"./mfa.js\";\nimport { getPkceRequestQueryParams } from \"./pkce.js\";\n\n/**\n * Log a user in with a TOTP authenticator code or a TOTP backup code,\n * plus an identifier for the user (e.g. userId, userUuid, or email)\n *\n * @property {String} totpCode \"123456\"\n * @property {String} backupCode \"aaaaa-bbbbb\"\n * @property {Integer} userId\n * @property {String} userUuid\n * @property {String} emailOrUsername\n * @property {String} email\n * @property {String} username\n * @property {String} phoneNumber\n * @property {String|Boolean} redirect - do not redirect if false, or redirect to given path\n */\nexport async function loginWithTotp({\n  totpCode,\n  backupCode,\n  userId,\n  userUuid,\n  emailOrUsername,\n  email,\n  username,\n  phoneNumber,\n  redirect,\n  handleUpstreamResponse,\n  handleMfaRequired,\n  handlePkceRequired,\n  handleTokens,\n  handleRedirect,\n} = {}) {\n  try {\n    const { tenantId } = store;\n    const { data } = await post(\n      `/tenants/${tenantId}/auth/totp`,\n      {\n        totpCode,\n        backupCode,\n        userId,\n        userUuid,\n        emailOrUsername,\n        email,\n        username,\n        phoneNumber,\n      },\n      {\n        headers: getMfaHeaders(),\n        params: getPkceRequestQueryParams(),\n      }\n    );\n\n    // Handle the API response to the login request\n    return handleLoginResponse({\n      data,\n      redirect,\n      handleUpstreamResponse,\n      handleMfaRequired,\n      handlePkceRequired,\n      handleTokens,\n      handleRedirect,\n    });\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n\nexport async function getTotp() {\n  try {\n    if (isFirstFactorTokenPresent()) {\n      const { data } = await get(`/auth/totp`, {\n        headers: getMfaHeaders(),\n      });\n      return data;\n    }\n\n    if (!store.tokens.accessToken) {\n      throw new Error(`getTotp() was called without a JWT access token.`);\n    }\n\n    const { data } = await get(`/auth/totp`, {\n      headers: {\n        Authorization: `Bearer ${store.tokens.accessToken}`,\n      },\n    });\n\n    return data;\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n","import { get } from \"./api.js\";\nimport { getIframe, postMessageAsPromise } from \"./iframe.js\";\nimport { store } from \"./store.js\";\nimport { removeAllCookies } from \"./cookies.js\";\nimport { setTokensFromCookies } from \"./tokens.js\";\nimport { defaultHandleRedirect } from \"./url\";\nimport { throwFormattedError } from \"./utils.js\";\n\n/**\n * Log a user out and redirect to the logout path.\n */\nexport async function logout({ method, redirect } = {}) {\n  if (method === \"saml\") {\n    return completeSamlLogout();\n  }\n  if (!store.tokens.accessToken) {\n    return removeAllCookies();\n  }\n\n  try {\n    const { data } = await get(`/auth/logout`, {\n      headers: {\n        authorization: `Bearer ${store.tokens.accessToken}`,\n      },\n    });\n    removeAllCookies();\n    defaultHandleRedirect(redirect, data);\n  } catch (err) {\n    removeAllCookies();\n  }\n}\n\nasync function completeSamlLogout() {\n  if (!store.tokens.accessToken) {\n    throw new Error(\"Please log in to authorize your logout request.\");\n  }\n\n  try {\n    const { data } = await get(`/auth/saml/idp/token`, {\n      headers: {\n        authorization: `Bearer ${store.tokens.accessToken}`,\n      },\n    });\n\n    window.location.assign(\n      `${store.baseUrl}auth/saml/idp/logout?tenant_id=${store.tenantId}&token=${data.token}&uuid=${store.user.userUuid}`\n    );\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n\n// TODO re-enable exchange method once new endpoints are stable [06/15/21]\n// --------------------------\n// const iframe = getIframe();\n// if (!iframe) return;\n// try {\n//   const { data } = await postMessageAsPromise({\n//     type: \"logout\",\n//     tenantId: store.tenantId,\n//   });\n//   removeAllCookies();\n//   setTokensFromCookies();\n//   defaultHandleRedirect(redirect, data);\n// } catch (error) {\n//   removeAllCookies();\n//   redirectToPath(\"/\");\n// }\n","export const apiUrl = `https://api.userfront.com/v0/`;\n\nexport const privateIPRegex =\n  /((^127\\.)|(^10\\.)|(^172\\.1[6-9]\\.)|(^172\\.2[0-9]\\.)|(^172\\.3[0-1]\\.)|(^192\\.168\\.))\\d{1,3}\\.\\d{1,3}/g;\n","import { get } from \"./api.js\";\nimport { privateIPRegex } from \"./constants.js\";\nimport { store } from \"./store.js\";\nimport { setFirstFactors } from \"./mfa.js\";\n\n/**\n * Global mode object\n */\nexport const mode = {\n  value: \"live\",\n  reason: undefined,\n  setMode,\n};\n\nsetModeSync();\n\n/**\n * Determine whether a hostname is in test mode.\n * @param {String} hn\n */\nexport function isTestHostname(hn) {\n  try {\n    const hostname = hn || window.location.hostname;\n    return !!(hostname.match(/localhost/g) || hostname.match(privateIPRegex));\n  } catch (err) {\n    return true;\n  }\n}\n\nexport function isHttps() {\n  try {\n    return window.location.protocol === \"https:\";\n  } catch (error) {\n    return false;\n  }\n}\n\n/**\n * Define the mode of operation (live or test)\n * and the tenant's authentication factors\n */\nexport async function setMode() {\n  try {\n    const { data } = await get(`/tenants/${store.tenantId}/mode`);\n    mode.value = data.mode || \"test\";\n    mode.reason = getReason(mode.value);\n    store.mode = mode.value;\n    setFirstFactors(data.authentication);\n    return data;\n  } catch (err) {\n    mode.value = \"test\";\n    store.mode = mode.value;\n  }\n}\n\n/**\n * Estimate the mode without making an API call\n */\nexport function setModeSync() {\n  const modeValue = isTestHostname() || !isHttps() ? \"test\" : \"live\";\n  mode.value = modeValue;\n  mode.reason = getReason(modeValue);\n  store.mode = modeValue;\n}\n\n/**\n * Set the reason for the mode\n * - http\n * - domain\n */\nfunction getReason(mode) {\n  try {\n    if (mode === \"live\") {\n      return \"domain\";\n    }\n    if (window.location.protocol === \"http:\") {\n      return \"http\";\n    } else if (window.location.protocol !== \"https:\") {\n      return \"protocol\";\n    } else {\n      return \"domain\";\n    }\n  } catch (error) {}\n}\n","/**\n * user methods are refactored into a separate file to avoid a circular dependency\n * between Userfront.refresh() [which requires setUser()]\n * and Userfront.user.update() [which requires refresh()].\n */\nimport { put } from \"./api.js\";\nimport { store } from \"./store.js\";\nimport { refresh } from \"./refresh.js\";\nimport { getTotp } from \"./totp.js\";\nimport { getJwtPayload } from \"./utils.js\";\nimport { updatePassword } from \"./password.js\";\n\n/**\n * Update the user record on Userfront\n * @param {Object} payload User properties to update e.g. { name: 'John Doe' }\n */\nexport async function update(payload) {\n  if (!payload || Object.keys(payload).length < 1) {\n    return console.warn(\"Missing user properties to update\");\n  }\n\n  // Make request to update the user\n  await put(`/self`, payload, {\n    headers: {\n      authorization: `Bearer ${store.tokens.accessToken}`,\n    },\n  });\n\n  // Refresh the access and ID tokens, and set the store.user object from the ID token\n  await refresh();\n\n  return store.user;\n}\n\n/**\n * Determine whether the access token has a given role\n * @param {String} roleName\n * @param {Object} options\n * @returns {Boolean}\n */\nexport function hasRole(roleName, { tenantId } = {}) {\n  try {\n    if (!store.tokens.accessToken || !store.tenantId) {\n      return false;\n    }\n    const { authorization } = getJwtPayload(store.tokens.accessToken);\n    if (!authorization) {\n      return false;\n    }\n    tenantId = tenantId || store.tenantId;\n    if (!authorization[tenantId] || !authorization[tenantId].roles) {\n      return false;\n    }\n    return authorization[tenantId].roles.indexOf(roleName) > -1;\n  } catch (error) {\n    return false;\n  }\n}\n\n/**\n * Add the methods to the store.user object\n */\nstore.user.update = update;\nstore.user.hasRole = hasRole;\nstore.user.updatePassword = updatePassword;\nstore.user.getTotp = getTotp;\n","import axios from \"axios\";\nimport { store } from \"./store.js\";\nimport {\n  tokens,\n  accessToken,\n  idToken,\n  setTokensFromCookies,\n  setTokenNames,\n} from \"./tokens\";\nimport { getSession } from \"./session\";\nimport { redirectIfLoggedIn, redirectIfLoggedOut } from \"./url.js\";\nimport { signup } from \"./signup.js\";\nimport { login } from \"./login.js\";\nimport { updatePassword, resetPassword, sendResetLink } from \"./password.js\";\nimport { sendLoginLink } from \"./link.js\";\nimport { sendVerificationCode } from \"./verificationCode\";\nimport { logout } from \"./logout.js\";\nimport { mode, setMode, setModeSync } from \"./mode.js\";\n// import { setIframe } from \"./iframe.js\";\nimport { user } from \"./user.js\";\nimport \"./user.methods.js\";\nimport { refresh } from \"./refresh.js\";\nimport { apiUrl } from \"./constants.js\";\nimport { resetMfa } from \"./mfa.js\";\n\nlet initCallbacks = [];\n\n/**\n * Initialize the Userfront library.\n * @param {String} tenantId\n */\nfunction init(tenantId, opts = {}) {\n  if (!tenantId) return console.warn(\"Userfront initialized without tenantId\");\n\n  store.tenantId = tenantId;\n\n  store.baseUrl = opts.baseUrl || apiUrl;\n  if (!store.baseUrl.endsWith(\"/\")) {\n    store.baseUrl += \"/\";\n  }\n\n  if (opts.domain) {\n    store.domain = opts.domain;\n    const url = `https://${store.domain}`;\n    axios.defaults.headers.common[\"x-application-id\"] = url;\n    axios.defaults.headers.common[\"x-origin\"] = url;\n  }\n\n  setTokenNames();\n  // setIframe(); // TODO re-enable when iframe is needed\n  setTokensFromCookies();\n\n  // Estimate the mode synchronously with local data.\n  // Clients that require the true mode or the default\n  // authenticationData should call and await setMode.\n  setModeSync();\n\n  resetMfa();\n\n  try {\n    if (initCallbacks.length > 0) {\n      initCallbacks.forEach((cb) => {\n        if (!cb || typeof cb !== \"function\") return;\n        cb({ tenantId });\n      });\n    }\n    initCallbacks = [];\n  } catch (error) {}\n}\n\n/**\n * Add a callback function to be called upon Userfront.init()\n * @param {Function} cb\n */\nfunction addInitCallback(cb) {\n  if (!cb || typeof cb !== \"function\") return;\n  initCallbacks.push(cb);\n}\n\n/**\n\n * Register a window-level event called \"urlchanged\" that will fire\n * whenever the browser URL changes.\n */\nlet isRegistered = false;\nfunction registerUrlChangedEventListener() {\n  if (isRegistered) return;\n  isRegistered = true;\n  try {\n    history.pushState = ((f) =>\n      function pushState() {\n        var ret = f.apply(this, arguments);\n        window.dispatchEvent(new Event(\"pushstate\"));\n        window.dispatchEvent(new Event(\"urlchanged\"));\n        return ret;\n      })(history.pushState);\n\n    history.replaceState = ((f) =>\n      function replaceState() {\n        var ret = f.apply(this, arguments);\n        window.dispatchEvent(new Event(\"replacestate\"));\n        window.dispatchEvent(new Event(\"urlchanged\"));\n        return ret;\n      })(history.replaceState);\n\n    window.addEventListener(\"popstate\", () => {\n      window.dispatchEvent(new Event(\"urlchanged\"));\n    });\n  } catch (error) {}\n}\n\n/**\n * EXPORTS\n */\n\nexport default {\n  // index\n  addInitCallback,\n  init,\n  registerUrlChangedEventListener,\n\n  //logout\n  logout,\n\n  // mode\n  mode,\n  setMode,\n\n  // refresh\n  refresh: (a, b, c) => {\n    try {\n      console.warn(\n        \"Userfront.refresh() is deprecated and will be removed. Please use Userfront.tokens.refresh() instead.\"\n      );\n    } catch (error) {}\n    return refresh(a, b, c);\n  },\n\n  // signon\n  login,\n  resetPassword,\n  updatePassword,\n  sendLoginLink,\n  sendResetLink,\n  sendVerificationCode,\n  signup,\n\n  // store\n  store,\n\n  // tokens\n  tokens,\n  accessToken,\n  idToken,\n\n  // session\n  getSession,\n\n  // url\n  redirectIfLoggedIn,\n  redirectIfLoggedOut,\n\n  // user\n  user,\n\n  // utils\n};\n","import { loginWithPassword } from \"./password.js\";\nimport { loginWithPasswordMigrate } from \"./password.migrate.js\";\nimport { loginWithLink, sendPasswordlessLink } from \"./link.js\";\nimport { signonWithSso } from \"./sso.js\";\nimport { loginWithTotp } from \"./totp.js\";\nimport { loginWithVerificationCode } from \"./verificationCode.js\";\nimport { completeSamlLogin } from \"./saml.js\";\nimport { setupPkce } from \"./pkce.js\";\n\n/**\n * Log a user in via the provided method. This method serves to call other\n * methods, depending on the \"method\" parameter passed in.\n * @property {String} method\n * @property {Number} userId\n * @property {String} userUuid\n * @property {String} email\n * @property {String} username\n * @property {String} emailOrUsername\n * @property {String} phoneNumber\n * @property {String} password\n * @property {String} token\n * @property {String} uuid\n * @property {String} totpCode\n * @property {String} backupCode\n * @property {String} channel \"sms\" or \"email\"\n * @property {String} verificationCode\n * @property {String} providerId ID of custom SSO provider\n * @property {String|Boolean} redirect - do not redirect if false, or redirect to given path\n * @property {Function} handleUpstreamResponse\n * @property {Function} handleMfaRequired\n * @property {Function} handlePkceRequired\n * @property {Function} handleTokens\n * @property {Function} handleRedirect\n */\nexport async function login({\n  method,\n  // User identifiers\n  userId,\n  userUuid,\n  email,\n  username,\n  emailOrUsername,\n  phoneNumber,\n  // Password\n  password,\n  // Link\n  token,\n  uuid,\n  // Totp\n  totpCode,\n  backupCode,\n  // Verification code\n  channel,\n  verificationCode,\n  // Custom SSO\n  providerId,\n  // Other\n  redirect,\n  handleUpstreamResponse,\n  handleMfaRequired,\n  handlePkceRequired,\n  handleTokens,\n  handleRedirect,\n  options,\n} = {}) {\n  if (!method) {\n    throw new Error('Userfront.login called without \"method\" property.');\n  }\n  setupPkce();\n  switch (method) {\n    case \"apple\":\n    case \"azure\":\n    case \"facebook\":\n    case \"github\":\n    case \"google\":\n    case \"linkedin\":\n    case \"okta\":\n      return signonWithSso({ provider: method, redirect });\n    case \"custom\":\n      return signonWithSso({ provider: method, redirect, providerId });\n    case \"password\":\n      return loginWithPassword({\n        email,\n        username,\n        emailOrUsername,\n        password,\n        redirect,\n        handleUpstreamResponse,\n        handleMfaRequired,\n        handlePkceRequired,\n        handleTokens,\n        handleRedirect,\n        options,\n      });\n    case \"password-migrate\":\n      return loginWithPasswordMigrate({\n        email,\n        username,\n        emailOrUsername,\n        password,\n        redirect,\n        handleUpstreamResponse,\n        handleMfaRequired,\n        handlePkceRequired,\n        handleTokens,\n        handleRedirect,\n        options,\n      });\n    case \"passwordless\":\n      return sendPasswordlessLink({ email });\n    case \"link\":\n      return loginWithLink({\n        token,\n        uuid,\n        redirect,\n        handleUpstreamResponse,\n        handleMfaRequired,\n        handlePkceRequired,\n        handleTokens,\n        handleRedirect,\n      });\n    case \"totp\":\n      return loginWithTotp({\n        totpCode,\n        backupCode,\n        userId,\n        userUuid,\n        emailOrUsername,\n        email,\n        username,\n        phoneNumber,\n        redirect,\n        handleUpstreamResponse,\n        handleMfaRequired,\n        handlePkceRequired,\n        handleTokens,\n        handleRedirect,\n      });\n    case \"verificationCode\":\n      return loginWithVerificationCode({\n        channel,\n        email,\n        phoneNumber,\n        verificationCode,\n        redirect,\n        handleUpstreamResponse,\n        handleMfaRequired,\n        handlePkceRequired,\n        handleTokens,\n        handleRedirect,\n      });\n    case \"saml\":\n      return completeSamlLogin();\n    default:\n      throw new Error('Userfront.login called with invalid \"method\" property.');\n  }\n}\n","import { post } from \"./api.js\";\nimport { store } from \"./store.js\";\nimport { throwFormattedError } from \"./utils.js\";\nimport { handleLoginResponse } from \"./authentication.js\";\nimport { getMfaHeaders } from \"./mfa.js\";\nimport { getPkceRequestQueryParams } from \"./pkce.js\";\n\n/**\n * Log a user in with email/username and password using the password/migrate endpoint.\n * Redirect the browser after successful login based on the redirectTo value returned.\n * @property {String} email The user's email. One of email/username/emailOrUsername should be present.\n * @property {String} username The user's username. One of email/username/emailOrUsername should be present.\n * @property {String} emailOrUsername Either the user's email or username. One of email/username/emailOrUsername should be present.\n * @property {String} password\n * @property {String|Boolean} redirect\n *  URL to redirect to after login, or false to suppress redirect. Otherwise, redirects to the after-login path set on the server.\n * @property {Function} handleUpstreamResponse\n * @property {Function} handleMfaRequired\n * @property {Function} handlePkceRequired\n * @property {Function} handleTokens\n * @property {Function} handleRedirect\n * @property {Object} options\n * @property {Boolean} options.noResetEmail\n *  By default, Userfront sends a password reset email if a user without a password tries to log in with a password.\n *  Set options.noResetEmail = true to override this behavior and return an error instead.\n *\n */\nexport async function loginWithPasswordMigrate({\n  email,\n  username,\n  emailOrUsername,\n  password,\n  redirect,\n  handleUpstreamResponse,\n  handleMfaRequired,\n  handlePkceRequired,\n  handleTokens,\n  handleRedirect,\n  options,\n}) {\n  try {\n    const body = {\n      emailOrUsername: email || username || emailOrUsername,\n      password,\n    };\n    if (options && options.noResetEmail) {\n      body.options = {\n        noResetEmail: true,\n      };\n    }\n    const { tenantId } = store;\n\n    // Make the request to password/migrate\n    const { data } = await post(\n      `/tenants/${tenantId}/auth/password/migrate`,\n      body,\n      {\n        headers: getMfaHeaders(),\n        params: getPkceRequestQueryParams(),\n      }\n    );\n\n    // Handle the API response to the login request\n    return handleLoginResponse({\n      data,\n      redirect,\n      handleUpstreamResponse,\n      handleMfaRequired,\n      handlePkceRequired,\n      handleTokens,\n      handleRedirect,\n    });\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n","import { get } from \"./api.js\";\nimport { store } from \"./store.js\";\nimport { throwFormattedError } from \"./utils.js\";\n\nexport async function completeSamlLogin() {\n  try {\n    if (!store.tokens.accessToken) {\n      return console.warn(\"Cannot complete SAML login without access token\");\n    }\n\n    const { data } = await get(`/auth/saml/idp/token`, {\n      headers: {\n        authorization: `Bearer ${store.tokens.accessToken}`,\n      },\n    });\n\n    window.location.assign(\n      `${store.baseUrl}auth/saml/idp/login?tenant_id=${store.tenantId}&token=${data.token}&uuid=${store.user.userUuid}`\n    );\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n","import { signupWithPassword } from \"./password.js\";\nimport { signonWithSso } from \"./sso.js\";\nimport { sendPasswordlessLink } from \"./link.js\";\nimport { sendVerificationCode } from \"./verificationCode.js\";\nimport { setupPkce } from \"./pkce.js\";\n\n/**\n * Register a user via the provided method. This method serves to call other\n * methods, depending on the \"method\" parameter passed in.\n * @property {String} method\n * @property {String} email\n * @property {String} username\n * @property {String} phoneNumber\n * @property {String} name\n * @property {Object} data - Object for custom user fields\n * @property {String} password\n * @property {String} channel \"sms\" or \"email\"\n * @property {String} providerId ID of custom SSO provider\n * @property {String} redirect - do not redirect if false, or redirect to given path\n * @property {Function} handleUpstreamResponse\n * @property {Function} handleMfaRequired\n * @property {Function} handlePkceRequired\n * @property {Function} handleTokens\n * @property {Function} handleRedirect\n */\nexport async function signup({\n  method,\n  email,\n  username,\n  phoneNumber,\n  name,\n  data,\n  password,\n  // Verification code\n  channel,\n  // Custom SSO\n  providerId,\n  // Misc.\n  redirect,\n  handleUpstreamResponse,\n  handleMfaRequired,\n  handlePkceRequired,\n  handleTokens,\n  handleRedirect,\n} = {}) {\n  setupPkce();\n  if (!method) {\n    throw new Error('Userfront.signup called without \"method\" property.');\n  }\n  switch (method) {\n    case \"apple\":\n    case \"azure\":\n    case \"facebook\":\n    case \"github\":\n    case \"google\":\n    case \"linkedin\":\n    case \"okta\":\n      return signonWithSso({ provider: method, redirect });\n    case \"custom\":\n      return signonWithSso({ provider: method, redirect, providerId });\n    case \"password\":\n      return signupWithPassword({\n        username,\n        name,\n        email,\n        password,\n        userData: data,\n        redirect,\n        handleUpstreamResponse,\n        handleMfaRequired,\n        handlePkceRequired,\n        handleTokens,\n        handleRedirect,\n      });\n    case \"passwordless\":\n      return sendPasswordlessLink({ email, name, username, userData: data });\n    case \"verificationCode\":\n      return sendVerificationCode({\n        channel,\n        email,\n        phoneNumber,\n        name,\n        username,\n        data,\n      });\n    default:\n      throw new Error(\n        'Userfront.signup called with invalid \"method\" property.'\n      );\n  }\n}\n"],"names":["store","user","tokens","mode","getJwtPayload","token","base64","split","replace","jsonPayload","decodeURIComponent","window","atob","map","c","charCodeAt","toString","slice","join","JSON","parse","error","console","isJwtLocallyValid","payload","Date","exp","throwFormattedError","_error$response","_error$response$data","Error","response","data","message","isBrowser","reduceSlashes","str","put","path","options","url","baseUrl","Promise","resolve","axios","e","reject","post","get","setCookie","value","type","cookieName","tenantId","secure","sameSite","Cookies","set","removeCookie","name","paths","domains","location","pathname","hostname","primaryDomain","undefined","err","domain","remove","removeAllCookies","accessTokenName","idTokenName","refreshTokenName","accessToken","idToken","refreshToken","attr","unsetUser","isFirstFactorTokenPresent","authenticationData","firstFactorToken","getMfaHeaders","authorization","clearMfa","secondFactors","getSession","getIsLoggedIn","then","isLoggedIn","needsSecondFactor","firstFactors","resetMfaState","body","recover","result","isAccessTokenLocallyValid","refresh","_catch","codeChallenge","usePkce","clearPkceDataFromLocalStorage","localStorage","removeItem","setupPkce","codeChallengeFromQueryParams","getQueryAttr","expiresAt","now","setItem","writePkceDataToLocalStorage","codeChallengeFromLocalStorage","getItem","parseInt","readPkceDataFromLocalStorage","getPkceRequestQueryParams","code_challenge","attrName","href","indexOf","defaultHandleRedirect","redirect","redirectToPath","redirectTo","pathOrUrl","document","el","createElement","assign","hash","search","handleLoginResponse","handleUpstreamResponse","handleMfaRequired","handlePkceRequired","handleTokens","handleRedirect","_temp13","_exit","_temp11","_result","_temp9","_exit2","_temp7","_result3","_temp5","hasOwnProperty","_temp4","redirectValue","_temp6","authorizationCode","defaultHandlePkceRequired","warn","_url","URL","searchParams","_temp8","_temp3","defaultHandleTokens","_temp10","_temp2","_temp","defaultHandleMfaRequired","isMfaRequired","authentication","_temp12","upstreamResponse","setCookiesAndTokens","access","cookieOptions","id","setTokensFromCookies","basicRefresh","headers","status","exchange","tokenName","idTokenPayload","propsToDefine","prop","setUser","updatePasswordWithJwt","password","existingPassword","Authorization","updatePasswordWithLink","uuid","updatePassword","method","resetPassword","signonWithSso","provider","providerId","append","origin","getProviderLink","sendPasswordlessLink","email","username","userData","enforceChannel","channel","phoneNumber","sendVerificationCode","res","privateIPRegex","setMode","reason","getReason","Array","isArray","setModeSync","modeValue","hn","match","isTestHostname","protocol","isHttps","update","Object","keys","length","hasRole","roleName","roles","getTotp","_result2","initCallbacks","isRegistered","addInitCallback","cb","push","init","opts","endsWith","defaults","common","forEach","registerUrlChangedEventListener","history","pushState","f","ret","apply","this","arguments","dispatchEvent","Event","replaceState","addEventListener","logout","completeSamlLogout","userUuid","a","b","login","userId","emailOrUsername","totpCode","backupCode","verificationCode","loginWithPassword","noResetEmail","params","loginWithPasswordMigrate","loginWithLink","loginWithTotp","loginWithVerificationCode","completeSamlLogin","sendLoginLink","sendResetLink","signup","signupWithPassword","redirectIfLoggedIn","pkceStore","tenant","loginRedirectPath","redirectIfLoggedOut"],"mappings":"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"}